module.exports=[70406,(e,t,r)=>{t.exports=e.x("next/dist/compiled/@opentelemetry/api",()=>require("next/dist/compiled/@opentelemetry/api"))},88712,(e,t,r)=>{t.exports=e.x("nodemailer",()=>require("nodemailer"))},16330,e=>{"use strict";e.s(["config",()=>u,"default",()=>d,"handler",()=>m],16330);var t=e.i(26747),r=e.i(90406),a=e.i(44898),s=e.i(62950);e.s(["default",()=>i],74463);var n=e.i(88712);async function i(e,t){if("POST"!==e.method)return t.status(405).json({message:"Method not allowed"});let{name:r,email:a,message:s,appointmentDate:i}=e.body;if(!r||!a||!s)return t.status(400).json({message:"Name, email, and message are required"});if(!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(a))return t.status(400).json({message:"Invalid email format"});try{let e=n.default.createTransport({service:"gmail",auth:{user:process.env.EMAIL_USER,pass:process.env.EMAIL_PASS}}),o={from:process.env.EMAIL_USER,to:"info@studiodemind.com",subject:`New Appointment Request from ${r}`,html:`
        <h2>New Contact Form Submission</h2>
        <p><strong>Name:</strong> ${r}</p>
        <p><strong>Email:</strong> ${a}</p>
        <p><strong>Appointment Date:</strong> ${i?new Date(i).toLocaleDateString():"Not specified"}</p>
        <p><strong>Message:</strong></p>
        <p>${s.replace(/\n/g,"<br>")}</p>
      `};await e.sendMail(o),t.status(200).json({message:"Email sent successfully"})}catch(e){console.error("Error sending email:",e),t.status(500).json({message:"Failed to send email"})}}var o=e.i(74463),l=e.i(7031),p=e.i(81927);let d=(0,s.hoist)(o,"default"),u=(0,s.hoist)(o,"config"),c=new a.PagesAPIRouteModule({definition:{kind:r.RouteKind.PAGES_API,page:"/api/contact",pathname:"/api/contact",bundlePath:"",filename:""},userland:o,distDir:".next",relativeProjectDir:""});async function m(e,r,a){let s="/api/contact";s=s.replace(/\/index$/,"")||"/";let n=await c.prepare(e,r,{srcPage:s});if(!n){r.statusCode=400,r.end("Bad Request"),null==a.waitUntil||a.waitUntil.call(a,Promise.resolve());return}let{query:i,params:o,prerenderManifest:d,routerServerContext:u}=n;try{let t=e.method||"GET",a=(0,l.getTracer)(),s=a.getActiveScopeSpan(),n=c.instrumentationOnRequestError.bind(c),m=async s=>c.render(e,r,{query:{...i,...o},params:o,allowedRevalidateHeaderKeys:[],multiZoneDraftMode:!1,trustHostHeader:!1,previewProps:d.preview,propagateError:!1,dev:c.isDev,page:"/api/contact",internalRevalidate:null==u?void 0:u.revalidate,onError:(...t)=>n(e,...t)}).finally(()=>{if(!s)return;s.setAttributes({"http.status_code":r.statusCode,"next.rsc":!1});let n=a.getRootSpanAttributes();if(!n)return;if(n.get("next.span_type")!==p.BaseServerSpan.handleRequest)return void console.warn(`Unexpected root span type '${n.get("next.span_type")}'. Please report this Next.js issue https://github.com/vercel/next.js`);let i=n.get("next.route");if(i){let e=`${t} ${i}`;s.setAttributes({"next.route":i,"http.route":i,"next.span_name":e}),s.updateName(e)}else s.updateName(`${t} ${e.url}`)});s?await m(s):await a.withPropagatedContext(e.headers,()=>a.trace(p.BaseServerSpan.handleRequest,{spanName:`${t} ${e.url}`,kind:l.SpanKind.SERVER,attributes:{"http.method":t,"http.target":e.url}},m))}catch(e){if(c.isDev)throw e;(0,t.sendError)(r,500,"Internal Server Error")}finally{null==a.waitUntil||a.waitUntil.call(a,Promise.resolve())}}}];

//# sourceMappingURL=%5Broot-of-the-server%5D__de22057a._.js.map